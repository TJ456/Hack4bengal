/// <reference lib="dom" />

import { ethers } from 'ethers';
import { createMEVProtection } from './mev-protection';
import { DEX_ROUTER_ADDRESSES, DEX_FUNCTION_SELECTORS } from './constants';

async function testMEVProtection() {
    try {
        console.log("üîµ Starting MEV Protection Test Suite...");

        // 1. Setup provider with fallback options
        let provider: ethers.BrowserProvider | ethers.JsonRpcProvider;
        
        const isBrowser = typeof window !== 'undefined';
        const hasEthereum = isBrowser && 'ethereum' in window;

        if (hasEthereum) {
            provider = new ethers.BrowserProvider((window as any).ethereum);
            console.log("‚úÖ Using Browser Provider (MetaMask)");
        } else {
            const rpcUrl = process.env.RPC_URL || 'http://localhost:8545';
            provider = new ethers.JsonRpcProvider(rpcUrl);
            console.log("‚úÖ Using JSON-RPC Provider:", rpcUrl);
        }
        
        // 2. Initialize MEV Protection with comprehensive config
        console.log("\nüîµ Initializing MEV Protection...");
        const mevProtection = await createMEVProtection(provider, {
            enabled: true,
            useFlashbots: true,
            slippageTolerance: 0.5,
            authSigner: process.env.FLASHBOTS_AUTH_KEY ? 
                new ethers.Wallet(process.env.FLASHBOTS_AUTH_KEY) : 
                undefined
        });

        // 3. Test DEX Detection across protocols
        console.log("\nüîµ Testing DEX Detection across protocols...");
        
        const dexTestCases = [
            {
                name: "Uniswap V2 Swap",
                tx: {
                    to: DEX_ROUTER_ADDRESSES.UNISWAP_V2,
                    data: `0x${DEX_FUNCTION_SELECTORS.SWAP_EXACT_TOKENS_FOR_TOKENS}000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003`,
                    value: ethers.parseEther("0.1")
                }
            },
            {
                name: "Uniswap V3 ExactInput",
                tx: {
                    to: DEX_ROUTER_ADDRESSES.UNISWAP_V3,
                    data: `0x${DEX_FUNCTION_SELECTORS.EXACT_INPUT}000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003`,
                    value: ethers.parseEther("0.1")
                }
            },
            {
                name: "SushiSwap Swap",
                tx: {
                    to: DEX_ROUTER_ADDRESSES.SUSHISWAP,
                    data: `0x${DEX_FUNCTION_SELECTORS.SWAP_EXACT_ETH_FOR_TOKENS}000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003`,
                    value: ethers.parseEther("0.1")
                }
            }
        ];

        for (const testCase of dexTestCases) {
            const isProtected = await mevProtection.isTransactionProtected(testCase.tx);
            console.log(`‚úÖ ${testCase.name} Detection:`, isProtected ? "Protected" : "Not Protected");
        }

        // 4. Test Flashbots Integration
        console.log("\nüîµ Testing Flashbots Integration...");
        const network = await provider.getNetwork();
        console.log("Current Network:", network.chainId.toString());
        const flashbotsSupported = [BigInt(1), BigInt(5), BigInt(11155111)].includes(network.chainId); // Mainnet, Goerli, Sepolia
        console.log(flashbotsSupported ? "‚úÖ On Flashbots-supported network" : "‚ö†Ô∏è Flashbots not supported on this network");

        // 5. Test Slippage Protection
        console.log("\nüîµ Testing Slippage Protection...");
        
        // Test with different slippage scenarios
        const slippageTests = [0.1, 0.5, 1.0, 2.0];
        for (const slippage of slippageTests) {
            const mevProtectionWithSlippage = await createMEVProtection(provider, {
                enabled: true,
                useFlashbots: true,
                slippageTolerance: slippage
            });

            const testTx = {
                to: DEX_ROUTER_ADDRESSES.UNISWAP_V2,
                data: `0x${DEX_FUNCTION_SELECTORS.SWAP_EXACT_TOKENS_FOR_TOKENS}000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003`,
                value: ethers.parseEther("1.0")
            };

            const protectedTx = await mevProtectionWithSlippage.protectTransaction(testTx);
            console.log(`‚úÖ ${slippage}% Slippage Protection:`, protectedTx.data !== testTx.data ? "Applied" : "Failed");
        }

        // 6. Test Transaction Simulation (if on supported network)
        if (flashbotsSupported) {
            console.log("\nüîµ Testing Transaction Simulation...");
            try {
                const testTx = dexTestCases[0].tx;
                const protectedTx = await mevProtection.protectTransaction(testTx);
                console.log("‚úÖ Transaction Simulation Succeeded");
            } catch (error) {
                console.log("‚ö†Ô∏è Transaction Simulation Failed:", error.message);
            }
        }

        console.log("\n‚úÖ MEV Protection Test Suite Complete!");

    } catch (error) {
        console.error("‚ùå Test Failed:", error);
    }
}

// Run the test
testMEVProtection().catch(console.error);
